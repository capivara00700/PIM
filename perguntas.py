import dbconnect

def exercicios(nome):
    while True:
        print("="*50 + f"\nBem-vindo {nome} ao nosso programa de educa√ß√£o digital!!\nNosso objetivo √© criar um ambiente interativo para que voc√™ possa \naprender logica de progrma√ß√£o, boas praticas para prote√ß√£o de dados \nentre outros assuntos.")
        print("="*50 + "\nPrimeiro escolha o n√≠vel que voc√™ deseja acessar:")
        print("N√≠vel F√°cil [1]\nN√≠vel Intermedi√°rio [2]")
        escolhaNivel = input("> ")
        print("="*50 + "\nAgora escolha qual tema voc√™ deseja acessar: ")
        print("Tipos de Dados [1]\nEstrutura de Controle [2]\nVari√°veis e Operadores [3]\nResolu√ß√£o de Problemas [4]")
        escolhaTema = int(input("> "))

        if escolhaNivel == "1":
            quiz(perguntas_faceis, topicos_disponiveis[escolhaTema], "N√≠vel F√°cil", nome)
            break
        elif escolhaNivel == "2":
            quiz(perguntas_intermediarias, topicos_disponiveis[escolhaTema], "N√≠vel Intermedi√°rio", nome)
            break
        else:
            print("Voc√™ selecionou alguma op√ß√£o inv√°lida, por favor tente novamente.")
#=================================================================================================
def quiz(perguntas, tema, nivel_nome, nome):
    tipos_dados_perguntas = perguntas[tema]

    pontuacao = 0

    print("="*50+f"\nBem vindo ao t√≥pico sobre {tema} ({nivel_nome})\nvoc√™ gostaria de ver uma explica√ß√£o sobre o assunto [1] \nou ir direto para a nossa atividade interativa? [2]")
    escolha = int(input("> "))

    while True: 
            if escolha == 1:
                print('='*50)
                print(resumos[nivel_nome][tema])
            elif escolha == 2:
                print("="*50+f'\nAqui voc√™ podera testar seus conhecimentos sobre \n{tema} e ver como foi o seu desempenho, mas n√£o se preocupe \ncaso erre, voc√™ tem varias tentavas. Boa sorte!!!\n')
                for i, pergunta in enumerate(tipos_dados_perguntas, 1):
                    print(f"{i}) {pergunta['pergunta']}")
                    for opcao in pergunta["opcoes"]:
                        print(opcao)
                    resposta = input("> ").lower()
                    
                    if resposta == pergunta["resposta"]:
                        print("‚úÖ Resposta correta!\n")
                        pontuacao += 1
                    else:
                        print(f"‚ùå Resposta incorreta. {pergunta['explicacao']}\n")
                print(f"üèÅ Voc√™ acertou {pontuacao} de {len(tipos_dados_perguntas)} perguntas.\n")
                dbconnect.addPontos(pontuacao, nivel_nome, tema, nome) #Adicionando a pontua√ß√£o
            es = int(input("="*50+'\nOque gostaria de acessar a seguir?\nAtividade [1]\nEscolher outro Nivel/Tema [2]\nFechar o programa [3]\n> '))
            if es == 1:
                escolha == escolha + 1
            elif es == 2:
                exercicios(nome)
            else:
                print('Programa encerrado.')
                break

#=====================================================================================
perguntas_faceis = {
    "Tipos de Dados": [
        {
            "pergunta": "Qual √© o tipo de dado do valor 10?",
            "opcoes": ["a) int", "b) str", "c) float", "d) bool"],
            "resposta": "a",
            "explicacao": "O valor 10 √© um n√∫mero inteiro, que em Python √© do tipo 'int'."
        },
        {
            "pergunta": "O que significa o tipo 'str'?",
            "opcoes": ["a) n√∫mero", "b) texto", "c) decimal", "d) verdadeiro/falso"],
            "resposta": "b",
            "explicacao": "'str' significa string, que √© o tipo de dado usado para representar textos."
        },
        {
            "pergunta": "Qual destes √© um valor booleano?",
            "opcoes": ["a) 100", "b) 'True'", "c) False", "d) 'texto'"],
            "resposta": "c",
            "explicacao": "False √© um valor booleano em Python. Valores booleanos s√£o True e False."
        },
        {
            "pergunta": "O valor 3.14 pertence a qual tipo?",
            "opcoes": ["a) int", "b) str", "c) float", "d) bool"],
            "resposta": "c",
            "explicacao": "3.14 √© um n√∫mero decimal, que em Python pertence ao tipo 'float'."
        },
        {
            "pergunta": "O que o tipo bool representa?",
            "opcoes": ["a) texto", "b) n√∫mero decimal", "c) verdadeiro ou falso", "d) n√∫mero inteiro"],
            "resposta": "c",
            "explicacao": "O tipo 'bool' representa valores booleanos: True ou False (verdadeiro ou falso)."
        }
    ],
    "Estruturas de Controle": [
        {
            "pergunta": "Qual comando usamos para verificar uma condi√ß√£o?",
            "opcoes": ["a) print", "b) if", "c) input", "d) loop"],
            "resposta": "b",
            "explicacao": "Usamos 'if' para verificar se uma condi√ß√£o √© verdadeira e tomar decis√µes."
        },
        {
            "pergunta": "O que o comando 'else' faz?",
            "opcoes": ["a) repete c√≥digo", "b) executa se a condi√ß√£o for verdadeira", "c) executa se a condi√ß√£o for falsa", "d) define uma fun√ß√£o"],
            "resposta": "c",
            "explicacao": "'else' √© executado quando a condi√ß√£o do 'if' √© falsa."
        },
        {
            "pergunta": "Qual comando usamos para repetir algo v√°rias vezes?",
            "opcoes": ["a) repeat", "b) if", "c) while", "d) input"],
            "resposta": "c",
            "explicacao": "Usamos 'while' para repetir um bloco de c√≥digo enquanto a condi√ß√£o for verdadeira."
        },
        {
            "pergunta": "O que significa 'loop infinito'?",
            "opcoes": ["a) erro de sintaxe", "b) repeti√ß√£o que nunca termina", "c) fun√ß√£o que retorna True", "d) c√≥digo que roda uma vez s√≥"],
            "resposta": "b",
            "explicacao": "Um 'loop infinito' √© uma repeti√ß√£o que nunca termina, geralmente causada por uma condi√ß√£o que nunca fica falsa."
        },
        {
            "pergunta": "O que 'if x > 10:' verifica?",
            "opcoes": ["a) se x √© igual a 10", "b) se x √© menor que 10", "c) se x √© maior que 10", "d) se x √© diferente de 10"],
            "resposta": "c",
            "explicacao": "A express√£o 'x > 10' verifica se x √© maior que 10."
        }
    ],
    "Vari√°veis e Operadores": [
        {
            "pergunta": "Qual s√≠mbolo usamos para somar em Python?",
            "opcoes": ["a) -", "b) +", "c) *", "d) /"],
            "resposta": "b",
            "explicacao": "O s√≠mbolo '+' √© usado para somar dois n√∫meros em Python."
        },
        {
            "pergunta": "Qual operador usamos para subtra√ß√£o?",
            "opcoes": ["a) +", "b) *", "c) -", "d) /"],
            "resposta": "c",
            "explicacao": "O operador '-' realiza a subtra√ß√£o de valores."
        },
        {
            "pergunta": "Como criamos uma vari√°vel chamada idade?",
            "opcoes": ["a) idade = 20", "b) 20 = idade", "c) idade == 20", "d) var idade = 20"],
            "resposta": "a",
            "explicacao": "A atribui√ß√£o correta em Python √©: nome = valor. Ex: idade = 20."
        },
        {
            "pergunta": "O que faz o operador '*'?",
            "opcoes": ["a) soma", "b) divis√£o", "c) multiplica√ß√£o", "d) subtra√ß√£o"],
            "resposta": "c",
            "explicacao": "O operador '*' multiplica dois n√∫meros em Python."
        },
        {
            "pergunta": "Como chamamos um nome usado para armazenar um valor?",
            "opcoes": ["a) fun√ß√£o", "b) operador", "c) vari√°vel", "d) la√ßo"],
            "resposta": "c",
            "explicacao": "Uma vari√°vel √© um nome que usamos para guardar um valor na mem√≥ria."
        }
    ],
    "Resolu√ß√£o de Problemas": [
        {
            "pergunta": "O que √© o primeiro passo para resolver um problema com programa√ß√£o?",
            "opcoes": ["a) copiar c√≥digo", "b) entender o problema", "c) escrever qualquer coisa", "d) pular etapas"],
            "resposta": "b",
            "explicacao": "Antes de escrever c√≥digo, √© fundamental entender o problema que voc√™ quer resolver."
        },
        {
            "pergunta": "Por que √© importante planejar antes de programar?",
            "opcoes": ["a) para gastar tempo", "b) para evitar erros", "c) para copiar melhor", "d) para decorar comandos"],
            "resposta": "b",
            "explicacao": "Planejar ajuda a evitar erros e a escrever um c√≥digo mais eficiente."
        },
        {
            "pergunta": "O que podemos usar para pensar nos passos do programa?",
            "opcoes": ["a) um mapa", "b) receita de bolo", "c) algoritmo", "d) livro"],
            "resposta": "c",
            "explicacao": "Um algoritmo √© uma sequ√™ncia de passos para resolver um problema."
        },
        {
            "pergunta": "Qual √© uma boa pr√°tica ao testar um programa?",
            "opcoes": ["a) testar s√≥ uma vez", "b) n√£o testar", "c) testar com exemplos diferentes", "d) apagar o c√≥digo"],
            "resposta": "c",
            "explicacao": "Testar com exemplos diferentes ajuda a garantir que o programa funciona em v√°rios casos."
        },
        {
            "pergunta": "Se o c√≥digo deu erro, o que devemos fazer?",
            "opcoes": ["a) apagar tudo", "b) ler o erro e tentar corrigir", "c) ignorar", "d) fechar o programa"],
            "resposta": "b",
            "explicacao": "Ler a mensagem de erro pode ajudar a encontrar e corrigir o problema."
        }
    ]
}


perguntas_intermediarias = {
    "Tipos de Dados": [
        {
            "pergunta": "Qual √© o tipo do valor 3.14 em Python?",
            "opcoes": ["a) int", "b) str", "c) float", "d) bool"],
            "resposta": "c",
            "explicacao": "3.14 √© um n√∫mero decimal, representado pelo tipo float em Python."
        },
        {
            "pergunta": "Qual √© o tipo de dado do valor 'True' (sem aspas)?",
            "opcoes": ["a) int", "b) str", "c) bool", "d) float"],
            "resposta": "c",
            "explicacao": "'True' em Python (sem aspas) √© um valor booleano, que representa verdadeiro."
        },
        {
            "pergunta": "O que acontece se somarmos uma string e um n√∫mero?",
            "opcoes": ["a) Soma os valores", "b) Concatena", "c) D√° erro", "d) Multiplica"],
            "resposta": "c",
            "explicacao": "Em Python, n√£o podemos somar string com n√∫mero diretamente; isso gera um erro."
        },
        {
            "pergunta": "Qual √© o tipo da vari√°vel resultado = '5' + '10'?",
            "opcoes": ["a) int", "b) float", "c) str", "d) bool"],
            "resposta": "c",
            "explicacao": "A soma de duas strings com '+' resulta em outra string: '510'."
        },
        {
            "pergunta": "O que a fun√ß√£o type() retorna?",
            "opcoes": ["a) O valor da vari√°vel", "b) O nome da vari√°vel", "c) O tipo do dado", "d) O endere√ßo de mem√≥ria"],
            "resposta": "c",
            "explicacao": "A fun√ß√£o type() mostra qual √© o tipo de dado de um valor ou vari√°vel."
        }
    ],
    "Estruturas de Controle": [
        {
            "pergunta": "Qual dessas estruturas permite repetir um bloco at√© que uma condi√ß√£o seja falsa?",
            "opcoes": ["a) if", "b) else", "c) while", "d) break"],
            "resposta": "c",
            "explicacao": "'while' repete o bloco enquanto a condi√ß√£o for verdadeira, e para quando ela for falsa."
        },
        {
            "pergunta": "Em qual estrutura usamos o 'elif'?",
            "opcoes": ["a) if", "b) while", "c) for", "d) try"],
            "resposta": "a",
            "explicacao": "'elif' √© usado junto com 'if' para testar outra condi√ß√£o caso a primeira seja falsa."
        },
        {
            "pergunta": "Qual ser√° a sa√≠da de: if 10 > 5: print('A') else: print('B')?",
            "opcoes": ["a) A", "b) B", "c) AB", "d) Erro"],
            "resposta": "a",
            "explicacao": "10 √© maior que 5, ent√£o a condi√ß√£o √© verdadeira e 'A' ser√° exibido."
        },
        {
            "pergunta": "Qual palavra-chave usamos para sair de um la√ßo?",
            "opcoes": ["a) stop", "b) exit", "c) end", "d) break"],
            "resposta": "d",
            "explicacao": "'break' √© usado para interromper um la√ßo antes que ele termine normalmente."
        },
        {
            "pergunta": "O que acontece se a condi√ß√£o de um while nunca for falsa?",
            "opcoes": ["a) O programa termina", "b) O la√ßo n√£o inicia", "c) Ocorre um erro", "d) Entra em loop infinito"],
            "resposta": "d",
            "explicacao": "Se a condi√ß√£o nunca for falsa, o la√ßo 'while' repetir√° para sempre ‚Äî isso √© um loop infinito."
        }
    ],
    "Vari√°veis e Operadores": [
        {
            "pergunta": "Qual √© o valor de x ap√≥s: x = 10; x = x + 5?",
            "opcoes": ["a) 5", "b) 10", "c) 15", "d) 20"],
            "resposta": "c",
            "explicacao": "x come√ßa com 10 e depois soma 5, ent√£o o novo valor de x √© 15."
        },
        {
            "pergunta": "Qual operador usamos para comparar igualdade?",
            "opcoes": ["a) =", "b) !=", "c) ==", "d) =="],
            "resposta": "d",
            "explicacao": "'==' √© usado para comparar se dois valores s√£o iguais. '=' √© usado para atribui√ß√£o."
        },
        {
            "pergunta": "O que x = x * 2 faz?",
            "opcoes": ["a) Dobra o valor de x", "b) Divide x", "c) Soma 2 a x", "d) Apaga x"],
            "resposta": "a",
            "explicacao": "O valor de x ser√° multiplicado por 2 e atualizado."
        },
        {
            "pergunta": "Qual o resultado de 10 // 3?",
            "opcoes": ["a) 3.33", "b) 3", "c) 4", "d) 1"],
            "resposta": "b",
            "explicacao": "'//' faz divis√£o inteira, ou seja, sem o valor decimal. 10 dividido por 3 d√° 3 inteiro."
        },
        {
            "pergunta": "Qual operador retorna o resto da divis√£o?",
            "opcoes": ["a) /", "b) //", "c) %", "d) **"],
            "resposta": "c",
            "explicacao": "'%' retorna o resto de uma divis√£o. Ex: 10 % 3 = 1."
        }
    ],
    "Resolu√ß√£o de Problemas": [
        {
            "pergunta": "Qual √© a melhor maneira de entender um problema antes de programar?",
            "opcoes": ["a) Ignorar o enunciado", "b) Fazer testes", "c) Ler com aten√ß√£o e identificar as entradas e sa√≠das", "d) Escrever o c√≥digo direto"],
            "resposta": "c",
            "explicacao": "Entender o que entra e o que deve sair ajuda a estruturar a l√≥gica corretamente."
        },
        {
            "pergunta": "Para resolver um problema com c√≥digo, o que devemos fazer primeiro?",
            "opcoes": ["a) Programar", "b) Testar", "c) Planejar os passos", "d) Copiar c√≥digo da internet"],
            "resposta": "c",
            "explicacao": "Planejar os passos ajuda a organizar as ideias e resolver o problema com l√≥gica."
        },
        {
            "pergunta": "Qual dessas ferramentas ajuda a representar visualmente a l√≥gica de um algoritmo?",
            "opcoes": ["a) Gr√°fico de barras", "b) Fluxograma", "c) Lista", "d) Tabela verdade"],
            "resposta": "b",
            "explicacao": "Fluxogramas mostram o fluxo de decis√µes e a√ß√µes em um algoritmo de forma visual."
        },
        {
            "pergunta": "Se o c√≥digo n√£o est√° funcionando, qual a melhor atitude?",
            "opcoes": ["a) Apagar tudo", "b) Testar partes menores", "c) Desistir", "d) Ignorar os erros"],
            "resposta": "b",
            "explicacao": "Testar partes menores ajuda a identificar onde est√° o erro na l√≥gica ou sintaxe."
        },
        {
            "pergunta": "Por que √© importante testar diferentes cen√°rios no c√≥digo?",
            "opcoes": ["a) Para gastar tempo", "b) Para dificultar", "c) Para garantir que funcione em v√°rias situa√ß√µes", "d) Para ver a tela piscar"],
            "resposta": "c",
            "explicacao": "Testar diferentes casos ajuda a garantir que o c√≥digo est√° correto em todas as situa√ß√µes."
        }
    ]
}
resumos = {
        "N√≠vel F√°cil": {
            "Tipos de Dados": ("""
Em programa√ß√£o, tipos de dados indicam o tipo de informa√ß√£o com que estamos lidando.
Os principais s√£o:
- int (inteiro): n√∫meros como 5, -3, 100.
- float (decimal): n√∫meros com ponto, como 3.14.
- str (string): textos entre aspas, como "ol√°".
- bool (booleano): verdadeiro (True) ou falso (False).

Cada tipo tem comportamentos diferentes e √© usado para diferentes tarefas.
"""
            ),
            "Estruturas de Controle": ( """
As estruturas de controle determinam o fluxo do programa. Por exemplo:
- if: executa algo se uma condi√ß√£o for verdadeira.
- else: executa algo se a condi√ß√£o for falsa.
- while: repete uma a√ß√£o enquanto uma condi√ß√£o for verdadeira.

Elas permitem que o programa tome decis√µes e repita comandos quando necess√°rio.
"""
            ),
            "Vari√°veis e Operadores": ( """
Uma vari√°vel √© como uma caixinha com um nome, onde guardamos um valor.
Exemplo: idade = 20

Operadores s√£o s√≠mbolos que fazem opera√ß√µes:
- + soma
- - subtra√ß√£o
- * multiplica√ß√£o
- / divis√£o

Juntos, vari√°veis e operadores nos permitem guardar e calcular valores.
"""
            ),
            "Resolu√ß√£o de Problemas": ( """
Resolver problemas em programa√ß√£o envolve:
1. Entender o problema.
2. Pensar nos passos para resolv√™-lo.
3. Escrever esses passos no c√≥digo.
4. Testar e corrigir se necess√°rio.

Dividir o problema em partes menores ajuda muito!
"""
        )
        },
        "N√≠vel Intermedi√°rio": {
            "Tipos de Dados": ( """
Al√©m de saber quais s√£o os tipos (int, float, str, bool), √© importante entender como eles interagem:
- "5" + "3" = "53" (texto concatenado)
- 5 + 3 = 8 (soma num√©rica)

Voc√™ tamb√©m pode converter entre tipos:
- int("10") ‚Üí 10
- str(50) ‚Üí "50"

Saber converter tipos evita erros e d√° mais controle sobre o que o programa faz.
"""
            ),
            "Estruturas de Controle": ( """
Comandos como if, elif, else, for e while ajudam o programa a tomar decis√µes e repetir a√ß√µes:
- if...elif...else: avaliam v√°rias possibilidades.
- for: repete algo um n√∫mero certo de vezes.
- while: repete enquanto a condi√ß√£o for verdadeira.

Exemplo:
for i in range(5):
    print(i)
Isso imprime os n√∫meros de 0 a 4.
"""
            ),
            "Vari√°veis e Operadores": ( """
Al√©m dos operadores b√°sicos (+, -, *, /), usamos compara√ß√µes:
- == igual
- != diferente
- > maior
- < menor
- >= maior ou igual
- <= menor ou igual

E operadores l√≥gicos:
- and: verdadeiro se duas condi√ß√µes forem verdadeiras.
- or: verdadeiro se pelo menos uma for.
- not: inverte o valor l√≥gico.

Esses recursos tornam as decis√µes do programa mais inteligentes.
"""
            ),
            "Resolu√ß√£o de Problemas": ( """
Resolver problemas envolve pensar na l√≥gica antes de programar:
1. Entrada: o que o usu√°rio fornece.
2. Processamento: o que o programa faz com isso.
3. Sa√≠da: o que ser√° mostrado ao final.

Planejar bem usando algoritmos (passo a passo) ajuda muito.
Um bom planejamento evita erros e economiza tempo.
"""
            )
        }
    }
topicos_disponiveis = {
    1: "Tipos de Dados",
    2: "Estruturas de Controle",
    3: "Vari√°veis e Operadores",
    4: "Resolu√ß√£o de Problemas"
}
